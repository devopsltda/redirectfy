-- TRIGGERS

CREATE TRIGGER IF NOT EXISTS REMOVE_REDIRECIONADOR_SEM_LINKS
AFTER UPDATE OF REMOVIDO_EM ON LINK
WHEN (SELECT COUNT(*) AS QUANTIDADE_LINKS_ATIVOS FROM LINK WHERE LINK.REDIRECIONADOR = OLD.REDIRECIONADOR AND LINK.REMOVIDO_EM IS NOT NULL) = 0
BEGIN
    UPDATE REDIRECIONADOR SET REMOVIDO_EM = CURRENT_TIMESTAMP WHERE CODIGO_HASH = OLD.REDIRECIONADOR;
END;

-- Importante notar que esses triggers são relacionados ao histórico, e as mudanças são monitoradas via um BITMASK, onde a soma única dos valores múltiplos de 2 atribuídos
-- a cada coluna determina o que foi alterado e qual o tipo de alteração. Por padrão, quando um registro é removido, seu BITMASK é igual a -1.

-- PLANO_DE_ASSINATURA

CREATE TRIGGER IF NOT EXISTS PLANO_DE_ASSINATURA_INSERIR_HISTORICO
AFTER INSERT ON PLANO_DE_ASSINATURA
BEGIN
    INSERT INTO HISTORICO_PLANO_DE_ASSINATURA(_ROWID, ID, NOME, VALOR, LIMITE_REDIRECIONADORES, ORDENACAO_ALEATORIA_LINKS, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    VALUES (NEW.ROWID, NEW.ID, NEW.NOME, NEW.VALOR, NEW.LIMITE_REDIRECIONADORES, NEW.ORDENACAO_ALEATORIA_LINKS, NEW.CRIADO_EM, NEW.ATUALIZADO_EM, NEW.REMOVIDO_EM, 1, 255);
END;

CREATE TRIGGER IF NOT EXISTS PLANO_DE_ASSINATURA_ATUALIZAR_HISTORICO
AFTER UPDATE ON PLANO_DE_ASSINATURA
FOR EACH ROW
BEGIN
    INSERT INTO HISTORICO_PLANO_DE_ASSINATURA(_ROWID, ID, NOME, VALOR, LIMITE_REDIRECIONADORES, ORDENACAO_ALEATORIA_LINKS, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    SELECT OLD.ROWID,
           CASE WHEN OLD.ID != NEW.ID THEN NEW.ID ELSE NULL END,
           CASE WHEN OLD.NOME != NEW.NOME THEN NEW.NOME ELSE NULL END,
           CASE WHEN OLD.VALOR != NEW.VALOR THEN NEW.VALOR ELSE NULL END,
           CASE WHEN OLD.LIMITE_REDIRECIONADORES != NEW.LIMITE_REDIRECIONADORES THEN NEW.LIMITE_REDIRECIONADORES ELSE NULL END,
           CASE WHEN OLD.ORDENACAO_ALEATORIA_LINKS != NEW.ORDENACAO_ALEATORIA_LINKS THEN NEW.ORDENACAO_ALEATORIA_LINKS ELSE NULL END,
           CASE WHEN OLD.CRIADO_EM != NEW.CRIADO_EM THEN NEW.CRIADO_EM ELSE NULL END,
           CASE WHEN OLD.ATUALIZADO_EM != NEW.ATUALIZADO_EM THEN NEW.ATUALIZADO_EM ELSE NULL END,
           CASE WHEN OLD.REMOVIDO_EM != NEW.REMOVIDO_EM THEN NEW.REMOVIDO_EM ELSE NULL END,
           (SELECT MAX(VERSAO) FROM HISTORICO_PLANO_DE_ASSINATURA WHERE _ROWID = OLD.ROWID) + 1,
           (CASE WHEN OLD.ID != NEW.ID THEN 1 ELSE 0 END) +
           (CASE WHEN OLD.NOME != NEW.NOME THEN 2 ELSE 0 END) +
           (CASE WHEN OLD.VALOR != NEW.VALOR THEN 4 ELSE 0 END) +
           (CASE WHEN OLD.LIMITE_REDIRECIONADORES != NEW.LIMITE_REDIRECIONADORES THEN 8 ELSE 0 END) +
           (CASE WHEN OLD.ORDENACAO_ALEATORIA_LINKS != NEW.ORDENACAO_ALEATORIA_LINKS THEN 16 ELSE 0 END) +
           (CASE WHEN OLD.CRIADO_EM != NEW.CRIADO_EM THEN 32 ELSE 0 END) +
           (CASE WHEN OLD.ATUALIZADO_EM != NEW.ATUALIZADO_EM THEN 64 ELSE 0 END) +
           (CASE WHEN OLD.REMOVIDO_EM != NEW.REMOVIDO_EM THEN 128 ELSE 0 END);
END;

CREATE TRIGGER IF NOT EXISTS PLANO_DE_ASSINATURA_REMOVER_HISTORICO
AFTER DELETE ON PLANO_DE_ASSINATURA
BEGIN
    INSERT INTO HISTORICO_PLANO_DE_ASSINATURA(_ROWID, ID, NOME, VALOR, LIMITE_REDIRECIONADORES, ORDENACAO_ALEATORIA_LINKS, PERIODO_LIMITE, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    VALUES (OLD.ROWID, OLD.ID, OLD.NOME, OLD.VALOR, OLD.LIMITE_REDIRECIONADORES, OLD.ORDENACAO_ALEATORIA_LINKS, OLD.CRIADO_EM, OLD.ATUALIZADO_EM, OLD.REMOVIDO_EM, (SELECT COALESCE(MAX(VERSAO), 0) FROM HISTORICO_PLANO_DE_ASSINATURA WHERE _ROWID = OLD.ROWID) + 1, -1);
END;

-- USUARIO_KIRVANO

CREATE TRIGGER IF NOT EXISTS USUARIO_KIRVANO_INSERIR_HISTORICO
AFTER INSERT ON USUARIO_KIRVANO
BEGIN
    INSERT INTO HISTORICO_USUARIO_KIRVANO(_ROWID, ID, NOME, NOME_DE_USUARIO, EMAIL, PLANO_DE_ASSINATURA, CRIADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    VALUES (NEW.ROWID, NEW.ID, NEW.NOME, NEW.NOME_DE_USUARIO, NEW.EMAIL, NEW.PLANO_DE_ASSINATURA, NEW.CRIADO_EM, NEW.REMOVIDO_EM, 1, 127);
END;

CREATE TRIGGER IF NOT EXISTS USUARIO_KIRVANO_ATUALIZAR_HISTORICO
AFTER UPDATE ON USUARIO_KIRVANO
FOR EACH ROW
BEGIN
    INSERT INTO HISTORICO_USUARIO_KIRVANO(_ROWID, ID, NOME, NOME_DE_USUARIO, EMAIL, PLANO_DE_ASSINATURA, CRIADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    SELECT OLD.ROWID,
           CASE WHEN OLD.ID != NEW.ID THEN NEW.ID ELSE NULL END,
           CASE WHEN OLD.NOME != NEW.NOME THEN NEW.NOME ELSE NULL END,
           CASE WHEN OLD.NOME_DE_USUARIO != NEW.NOME_DE_USUARIO THEN NEW.NOME_DE_USUARIO ELSE NULL END,
           CASE WHEN OLD.EMAIL != NEW.EMAIL THEN NEW.EMAIL ELSE NULL END,
           CASE WHEN OLD.PLANO_DE_ASSINATURA != NEW.PLANO_DE_ASSINATURA THEN NEW.PLANO_DE_ASSINATURA ELSE NULL END,
           CASE WHEN OLD.CRIADO_EM != NEW.CRIADO_EM THEN NEW.CRIADO_EM ELSE NULL END,
           CASE WHEN OLD.REMOVIDO_EM != NEW.REMOVIDO_EM THEN NEW.REMOVIDO_EM ELSE NULL END,
           (SELECT MAX(VERSAO) FROM HISTORICO_USUARIO WHERE _ROWID = OLD.ROWID) + 1,
           (CASE WHEN OLD.ID != NEW.ID THEN 1 ELSE 0 END) +
           (CASE WHEN OLD.NOME != NEW.NOME THEN 2 ELSE 0 END) +
           (CASE WHEN OLD.NOME_DE_USUARIO != NEW.NOME_DE_USUARIO THEN 4 ELSE 0 END) +
           (CASE WHEN OLD.EMAIL != NEW.EMAIL THEN 8 ELSE 0 END) +
           (CASE WHEN OLD.PLANO_DE_ASSINATURA != NEW.PLANO_DE_ASSINATURA THEN 16 ELSE 0 END) +
           (CASE WHEN OLD.CRIADO_EM != NEW.CRIADO_EM THEN 32 ELSE 0 END) +
           (CASE WHEN OLD.REMOVIDO_EM != NEW.REMOVIDO_EM THEN 64 ELSE 0 END);
END;

CREATE TRIGGER IF NOT EXISTS USUARIO_KIRVANO_REMOVER_HISTORICO
AFTER DELETE ON USUARIO_KIRVANO
BEGIN
    INSERT INTO HISTORICO_USUARIO_KIRVANO(_ROWID, ID, NOME, NOME_DE_USUARIO, EMAIL, PLANO_DE_ASSINATURA, CRIADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    VALUES (OLD.ROWID, OLD.ID, OLD.NOME, OLD.NOME_DE_USUARIO, OLD.EMAIL, OLD.PLANO_DE_ASSINATURA, OLD.CRIADO_EM, OLD.REMOVIDO_EM, (SELECT COALESCE(MAX(VERSAO), 0) FROM HISTORICO_USUARIO_KIRVANO WHERE _ROWID = OLD.ROWID) + 1, -1);
END;

-- USUARIO

CREATE TRIGGER IF NOT EXISTS USUARIO_INSERIR_HISTORICO
AFTER INSERT ON USUARIO
BEGIN
    INSERT INTO HISTORICO_USUARIO(_ROWID, ID, NOME, NOME_DE_USUARIO, EMAIL, SENHA, DATA_DE_NASCIMENTO, PLANO_DE_ASSINATURA, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    VALUES (NEW.ROWID, NEW.ID, NEW.NOME, NEW.NOME_DE_USUARIO, NEW.EMAIL, NEW.SENHA, NEW.DATA_DE_NASCIMENTO, NEW.PLANO_DE_ASSINATURA, NEW.CRIADO_EM, NEW.ATUALIZADO_EM, NEW.REMOVIDO_EM, 1, 2047);
END;

CREATE TRIGGER IF NOT EXISTS USUARIO_ATUALIZAR_HISTORICO
AFTER UPDATE ON USUARIO
FOR EACH ROW
BEGIN
    INSERT INTO HISTORICO_USUARIO(_ROWID, ID, NOME, NOME_DE_USUARIO, EMAIL, SENHA, DATA_DE_NASCIMENTO, PLANO_DE_ASSINATURA, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    SELECT OLD.ROWID,
           CASE WHEN OLD.ID != NEW.ID THEN NEW.ID ELSE NULL END,
           CASE WHEN OLD.NOME != NEW.NOME THEN NEW.NOME ELSE NULL END,
           CASE WHEN OLD.NOME_DE_USUARIO != NEW.NOME_DE_USUARIO THEN NEW.NOME_DE_USUARIO ELSE NULL END,
           CASE WHEN OLD.EMAIL != NEW.EMAIL THEN NEW.EMAIL ELSE NULL END,
           CASE WHEN OLD.SENHA != NEW.SENHA THEN NEW.SENHA ELSE NULL END,
           CASE WHEN OLD.DATA_DE_NASCIMENTO != NEW.DATA_DE_NASCIMENTO THEN NEW.DATA_DE_NASCIMENTO ELSE NULL END,
           CASE WHEN OLD.PLANO_DE_ASSINATURA != NEW.PLANO_DE_ASSINATURA THEN NEW.PLANO_DE_ASSINATURA ELSE NULL END,
           CASE WHEN OLD.CRIADO_EM != NEW.CRIADO_EM THEN NEW.CRIADO_EM ELSE NULL END,
           CASE WHEN OLD.ATUALIZADO_EM != NEW.ATUALIZADO_EM THEN NEW.ATUALIZADO_EM ELSE NULL END,
           CASE WHEN OLD.REMOVIDO_EM != NEW.REMOVIDO_EM THEN NEW.REMOVIDO_EM ELSE NULL END,
           (SELECT MAX(VERSAO) FROM HISTORICO_USUARIO WHERE _ROWID = OLD.ROWID) + 1,
           (CASE WHEN OLD.ID != NEW.ID THEN 1 ELSE 0 END) +
           (CASE WHEN OLD.NOME != NEW.NOME THEN 2 ELSE 0 END) +
           (CASE WHEN OLD.NOME_DE_USUARIO != NEW.NOME_DE_USUARIO THEN 4 ELSE 0 END) +
           (CASE WHEN OLD.EMAIL != NEW.EMAIL THEN 8 ELSE 0 END) +
           (CASE WHEN OLD.SENHA != NEW.SENHA THEN 16 ELSE 0 END) +
           (CASE WHEN OLD.DATA_DE_NASCIMENTO != NEW.DATA_DE_NASCIMENTO THEN 32 ELSE 0 END) +
           (CASE WHEN OLD.PLANO_DE_ASSINATURA != NEW.PLANO_DE_ASSINATURA THEN 64 ELSE 0 END) +
           (CASE WHEN OLD.CRIADO_EM != NEW.CRIADO_EM THEN 128 ELSE 0 END) +
           (CASE WHEN OLD.ATUALIZADO_EM != NEW.ATUALIZADO_EM THEN 256 ELSE 0 END) +
           (CASE WHEN OLD.REMOVIDO_EM != NEW.REMOVIDO_EM THEN 512 ELSE 0 END);
END;

CREATE TRIGGER IF NOT EXISTS USUARIO_REMOVER_HISTORICO
AFTER DELETE ON USUARIO
BEGIN
    INSERT INTO HISTORICO_USUARIO(_ROWID, ID, NOME, NOME_DE_USUARIO, EMAIL, SENHA, DATA_DE_NASCIMENTO, PLANO_DE_ASSINATURA, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    VALUES (OLD.ROWID, OLD.ID, OLD.NOME, OLD.NOME_DE_USUARIO, OLD.EMAIL, OLD.SENHA, OLD.DATA_DE_NASCIMENTO, OLD.PLANO_DE_ASSINATURA, OLD.CRIADO_EM, OLD.ATUALIZADO_EM, OLD.REMOVIDO_EM, (SELECT COALESCE(MAX(VERSAO), 0) FROM HISTORICO_USUARIO WHERE _ROWID = OLD.ROWID) + 1, -1);
END;

-- EMAIL_AUTENTICACAO

CREATE TRIGGER IF NOT EXISTS EMAIL_AUTENTICACAO_INSERIR_HISTORICO
AFTER INSERT ON EMAIL_AUTENTICACAO
BEGIN
    INSERT INTO HISTORICO_EMAIL_AUTENTICACAO(_ROWID, ID, VALOR, TIPO, EXPIRA_EM, USUARIO_KIRVANO, VERSAO, BITMASK)
    VALUES (NEW.ROWID, NEW.ID, NEW.VALOR, NEW.TIPO, NEW.EXPIRA_EM, NEW.USUARIO_KIRVANO, 1, 31);
END;

CREATE TRIGGER IF NOT EXISTS EMAIL_AUTENTICACAO_ATUALIZAR_HISTORICO
AFTER UPDATE ON EMAIL_AUTENTICACAO
FOR EACH ROW
BEGIN
    INSERT INTO HISTORICO_EMAIL_AUTENTICACAO(_ROWID, ID, VALOR, TIPO, EXPIRA_EM, USUARIO_KIRVANO, VERSAO, BITMASK)
    SELECT OLD.ROWID,
           CASE WHEN OLD.ID != NEW.ID THEN NEW.ID ELSE NULL END,
           CASE WHEN OLD.VALOR != NEW.VALOR THEN NEW.VALOR ELSE NULL END,
           CASE WHEN OLD.TIPO != NEW.TIPO THEN NEW.TIPO ELSE NULL END,
           CASE WHEN OLD.EXPIRA_EM != NEW.EXPIRA_EM THEN NEW.EXPIRA_EM ELSE NULL END,
           CASE WHEN OLD.USUARIO_KIRVANO != NEW.USUARIO_KIRVANO THEN NEW.USUARIO_KIRVANO ELSE NULL END,
           (SELECT MAX(VERSAO) FROM HISTORICO_EMAIL_AUTENTICACAO WHERE _ROWID = OLD.ROWID) + 1,
           (CASE WHEN OLD.ID != NEW.ID THEN 1 ELSE 0 END) +
           (CASE WHEN OLD.VALOR != NEW.VALOR THEN 2 ELSE 0 END) +
           (CASE WHEN OLD.TIPO != NEW.TIPO THEN 4 ELSE 0 END) +
           (CASE WHEN OLD.EXPIRA_EM != NEW.EXPIRA_EM THEN 8 ELSE 0 END) +
           (CASE WHEN OLD.USUARIO_KIRVANO != NEW.USUARIO_KIRVANO THEN 16 ELSE 0 END);
END;

CREATE TRIGGER IF NOT EXISTS EMAIL_AUTENTICACAO_REMOVER_HISTORICO
AFTER DELETE ON EMAIL_AUTENTICACAO
BEGIN
    INSERT INTO HISTORICO_EMAIL_AUTENTICACAO(_ROWID, ID, VALOR, TIPO, EXPIRA_EM, USUARIO_KIRVANO, VERSAO, BITMASK)
    VALUES (OLD.ROWID, OLD.ID, OLD.VALOR, OLD.TIPO, OLD.EXPIRA_EM, OLD.USUARIO_KIRVANO, (SELECT COALESCE(MAX(VERSAO), 0) FROM HISTORICO_EMAIL_AUTENTICACAO WHERE _ROWID = OLD.ROWID) + 1, -1);
END;

-- REDIRECIONADOR

CREATE TRIGGER IF NOT EXISTS REDIRECIONADOR_INSERIR_HISTORICO
AFTER INSERT ON REDIRECIONADOR
BEGIN
    INSERT INTO HISTORICO_REDIRECIONADOR(_ROWID, ID, NOME, CODIGO_HASH, ORDEM_DE_REDIRECIONAMENTO, USUARIO, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    VALUES (NEW.ROWID, NEW.ID, NEW.NOME, NEW.CODIGO_HASH, NEW.ORDEM_DE_REDIRECIONAMENTO, NEW.USUARIO, NEW.CRIADO_EM, NEW.ATUALIZADO_EM, NEW.REMOVIDO_EM, 1, 255);
END;

CREATE TRIGGER IF NOT EXISTS REDIRECIONADOR_ATUALIZAR_HISTORICO
AFTER UPDATE ON REDIRECIONADOR
FOR EACH ROW
BEGIN
    INSERT INTO HISTORICO_REDIRECIONADOR(_ROWID, ID, NOME, CODIGO_HASH, ORDEM_DE_REDIRECIONAMENTO, USUARIO, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    SELECT OLD.ROWID,
           CASE WHEN OLD.ID != NEW.ID THEN NEW.ID ELSE NULL END,
           CASE WHEN OLD.NOME != NEW.NOME THEN NEW.NOME ELSE NULL END,
           CASE WHEN OLD.CODIGO_HASH != NEW.CODIGO_HASH THEN NEW.CODIGO_HASH ELSE NULL END,
           CASE WHEN OLD.ORDEM_DE_REDIRECIONAMENTO != NEW.ORDEM_DE_REDIRECIONAMENTO THEN NEW.ORDEM_DE_REDIRECIONAMENTO ELSE NULL END,
           CASE WHEN OLD.USUARIO != NEW.USUARIO THEN NEW.USUARIO ELSE NULL END,
           CASE WHEN OLD.CRIADO_EM != NEW.CRIADO_EM THEN NEW.CRIADO_EM ELSE NULL END,
           CASE WHEN OLD.ATUALIZADO_EM != NEW.ATUALIZADO_EM THEN NEW.ATUALIZADO_EM ELSE NULL END,
           CASE WHEN OLD.REMOVIDO_EM != NEW.REMOVIDO_EM THEN NEW.REMOVIDO_EM ELSE NULL END,
           (SELECT MAX(VERSAO) FROM HISTORICO_REDIRECIONADOR WHERE _ROWID = OLD.ROWID) + 1,
           (CASE WHEN OLD.ID != NEW.ID THEN 1 ELSE 0 END) +
           (CASE WHEN OLD.NOME != NEW.NOME THEN 2 ELSE 0 END) +
           (CASE WHEN OLD.CODIGO_HASH != NEW.CODIGO_HASH THEN 4 ELSE 0 END) +
           (CASE WHEN OLD.ORDEM_DE_REDIRECIONAMENTO != NEW.ORDEM_DE_REDIRECIONAMENTO THEN 8 ELSE 0 END) +
           (CASE WHEN OLD.USUARIO != NEW.USUARIO THEN 16 ELSE 0 END) +
           (CASE WHEN OLD.CRIADO_EM != NEW.CRIADO_EM THEN 32 ELSE 0 END) +
           (CASE WHEN OLD.ATUALIZADO_EM != NEW.ATUALIZADO_EM THEN 64 ELSE 0 END) +
           (CASE WHEN OLD.REMOVIDO_EM != NEW.REMOVIDO_EM THEN 128 ELSE 0 END);
END;

CREATE TRIGGER IF NOT EXISTS REDIRECIONADOR_REMOVER_HISTORICO
AFTER DELETE ON REDIRECIONADOR
BEGIN
    INSERT INTO HISTORICO_REDIRECIONADOR(_ROWID, ID, NOME, CODIGO_HASH, ORDEM_DE_REDIRECIONAMENTO, USUARIO, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    VALUES (OLD.ROWID, OLD.ID, OLD.NOME, OLD.CODIGO_HASH, OLD.ORDEM_DE_REDIRECIONAMENTO, OLD.USUARIO, OLD.CRIADO_EM, OLD.ATUALIZADO_EM, OLD.REMOVIDO_EM, (SELECT COALESCE(MAX(VERSAO), 0) FROM HISTORICO_REDIRECIONADOR WHERE _ROWID = OLD.ROWID) + 1, -1);
END;

-- LINK

CREATE TRIGGER IF NOT EXISTS LINK_INSERIR_HISTORICO
AFTER INSERT ON LINK
BEGIN
    INSERT INTO HISTORICO_LINK(_ROWID, ID, NOME, LINK, ATIVO, PLATAFORMA, REDIRECIONADOR, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    VALUES (NEW.ROWID, NEW.ID, NEW.NOME, NEW.LINK, NEW.ATIVO, NEW.PLATAFORMA, NEW.REDIRECIONADOR, NEW.CRIADO_EM, NEW.ATUALIZADO_EM, NEW.REMOVIDO_EM, 1, 511);
END;

CREATE TRIGGER IF NOT EXISTS LINK_ATUALIZAR_HISTORICO
AFTER UPDATE ON LINK
FOR EACH ROW
BEGIN
    INSERT INTO HISTORICO_LINK(_ROWID, ID, NOME, LINK, ATIVO, PLATAFORMA, REDIRECIONADOR, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    SELECT OLD.ROWID,
           CASE WHEN OLD.ID != NEW.ID THEN NEW.ID ELSE NULL END,
           CASE WHEN OLD.NOME != NEW.NOME THEN NEW.NOME ELSE NULL END,
           CASE WHEN OLD.LINK != NEW.LINK THEN NEW.LINK ELSE NULL END,
           CASE WHEN OLD.ATIVO != NEW.ATIVO THEN NEW.ATIVO ELSE NULL END,
           CASE WHEN OLD.PLATAFORMA != NEW.PLATAFORMA THEN NEW.PLATAFORMA ELSE NULL END,
           CASE WHEN OLD.REDIRECIONADOR != NEW.REDIRECIONADOR THEN NEW.REDIRECIONADOR ELSE NULL END,
           CASE WHEN OLD.CRIADO_EM != NEW.CRIADO_EM THEN NEW.CRIADO_EM ELSE NULL END,
           CASE WHEN OLD.ATUALIZADO_EM != NEW.ATUALIZADO_EM THEN NEW.ATUALIZADO_EM ELSE NULL END,
           CASE WHEN OLD.REMOVIDO_EM != NEW.REMOVIDO_EM THEN NEW.REMOVIDO_EM ELSE NULL END,
           (SELECT MAX(VERSAO) FROM HISTORICO_LINK WHERE _ROWID = OLD.ROWID) + 1,
           (CASE WHEN OLD.ID != NEW.ID THEN 1 ELSE 0 END) +
           (CASE WHEN OLD.NOME != NEW.NOME THEN 2 ELSE 0 END) +
           (CASE WHEN OLD.LINK != NEW.LINK THEN 4 ELSE 0 END) +
           (CASE WHEN OLD.ATIVO != NEW.ATIVO THEN 8 ELSE 0 END) +
           (CASE WHEN OLD.PLATAFORMA != NEW.PLATAFORMA THEN 16 ELSE 0 END) +
           (CASE WHEN OLD.REDIRECIONADOR != NEW.REDIRECIONADOR THEN 32 ELSE 0 END) +
           (CASE WHEN OLD.CRIADO_EM != NEW.CRIADO_EM THEN 64 ELSE 0 END) +
           (CASE WHEN OLD.ATUALIZADO_EM != NEW.ATUALIZADO_EM THEN 128 ELSE 0 END) +
           (CASE WHEN OLD.REMOVIDO_EM != NEW.REMOVIDO_EM THEN 256 ELSE 0 END);
END;

CREATE TRIGGER IF NOT EXISTS LINK_REMOVER_HISTORICO
AFTER DELETE ON LINK
BEGIN
    INSERT INTO HISTORICO_LINK(_ROWID, ID, NOME, LINK, ATIVO, PLATAFORMA, REDIRECIONADOR, CRIADO_EM, ATUALIZADO_EM, REMOVIDO_EM, VERSAO, BITMASK)
    VALUES (OLD.ROWID, OLD.ID, OLD.NOME, OLD.LINK, OLD.ATIVO, OLD.PLATAFORMA, OLD.REDIRECIONADOR, OLD.CRIADO_EM, OLD.ATUALIZADO_EM, OLD.REMOVIDO_EM, (SELECT COALESCE(MAX(VERSAO), 0) FROM HISTORICO_LINK WHERE _ROWID = OLD.ROWID) + 1, -1);
END;
